---
description: When editing or working with the react-ui package
globs: 
alwaysApply: false
---
# @copilotkit/react-ui Package Guide

## Overview

The `@copilotkit/react-ui` package provides pre-built, customizable UI components for CopilotKit applications. These components are built on top of `@copilotkit/react-core` and offer ready-to-use chat interfaces, popups, and other AI interaction components.

## Core Components

### CopilotChat
The main chat component with full conversation capabilities.

```tsx
import { CopilotChat } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

<CopilotChat
  instructions="You are a helpful assistant"
  labels={{
    title: "AI Assistant",
    initial: "How can I help you today?",
    placeholder: "Type your message...",
    send: "Send",
    stop: "Stop",
    regenerate: "Regenerate"
  }}
  icons={{
    send: <SendIcon />,
    stop: <StopIcon />,
    regenerate: <RefreshIcon />
  }}
  onInProgress={(inProgress) => console.log('Chat in progress:', inProgress)}
  onSubmitMessage={(message) => console.log('Message submitted:', message)}
  onStopGeneration={(args) => console.log('Generation stopped')}
  onReloadMessages={(args) => console.log('Messages reloaded')}
  onRegenerate={(messageId) => console.log('Regenerating message:', messageId)}
  onCopy={(message) => console.log('Message copied:', message)}
  onThumbsUp={(message) => console.log('Thumbs up:', message)}
  onThumbsDown={(message) => console.log('Thumbs down:', message)}
  imageUploadsEnabled={true}
  inputFileAccept="image/*"
  hideStopButton={false}
  className="custom-chat-class"
/>
```

**Key Features:**
- **Full Chat Interface**: Complete conversation UI with message history
- **Customizable Labels**: Localize all text elements
- **Custom Icons**: Replace default icons with custom ones
- **Event Callbacks**: Handle all chat interactions
- **Image Upload**: Support for image inputs
- **Markdown Rendering**: Rich text display with code highlighting
- **Message Actions**: Copy, regenerate, thumbs up/down
- **Responsive Design**: Works on all screen sizes

### CopilotPopup
A floating chat popup that can be triggered by user interaction.

```tsx
import { CopilotPopup } from "@copilotkit/react-ui";

<CopilotPopup
  instructions="You are a helpful assistant"
  labels={{
    title: "Quick Help",
    initial: "Need assistance?",
    placeholder: "Ask me anything..."
  }}
  icons={{
    open: <HelpIcon />,
    close: <CloseIcon />
  }}
  className="custom-popup-class"
  defaultOpen={false}
  trigger="click" // "click" | "hover"
  position="bottom-right" // "top-left" | "top-right" | "bottom-left" | "bottom-right"
/>
```

**Popup Features:**
- **Trigger Options**: Click or hover to open
- **Positioning**: Four corner positions available
- **Custom Triggers**: Use custom elements as triggers
- **Auto-close**: Configurable auto-close behavior
- **Responsive**: Adapts to screen size

### CopilotSidebar
A slide-out sidebar chat interface.

```tsx
import { CopilotSidebar } from "@copilotkit/react-ui";

<CopilotSidebar
  instructions="You are a helpful assistant"
  labels={{
    title: "AI Assistant",
    initial: "How can I help you today?"
  }}
  defaultOpen={false}
  position="right" // "left" | "right"
  width="400px"
  className="custom-sidebar-class"
/>
```

### CopilotModal
A modal dialog chat interface.

```tsx
import { CopilotModal } from "@copilotkit/react-ui";

<CopilotModal
  instructions="You are a helpful assistant"
  labels={{
    title: "AI Assistant",
    initial: "How can I help you today?"
  }}
  isOpen={isModalOpen}
  onClose={() => setIsModalOpen(false)}
  className="custom-modal-class"
/>
```

## Custom Component Overrides

All chat components support custom component overrides for complete UI control:

```tsx
<CopilotChat
  // Custom message components
  AssistantMessage={CustomAssistantMessage}
  UserMessage={CustomUserMessage}
  Messages={CustomMessages}
  
  // Custom render components
  RenderTextMessage={CustomTextMessage}
  RenderActionExecutionMessage={CustomActionMessage}
  RenderResultMessage={CustomResultMessage}
  RenderAgentStateMessage={CustomAgentMessage}
  RenderImageMessage={CustomImageMessage}
  
  // Custom input and suggestions
  Input={CustomInput}
  RenderSuggestionsList={CustomSuggestions}
  
  // Custom markdown components
  markdownTagRenderers={{
    code: CustomCodeBlock,
    pre: CustomPreBlock,
    // ... other markdown elements
  }}
/>
```

## Message Rendering Components

### RenderTextMessage
Renders text messages with markdown support.

```tsx
const CustomTextMessage = ({ message, ...props }) => {
  return (
    <div className="custom-text-message">
      <Markdown content={message.content} />
    </div>
  );
};
```

### RenderActionExecutionMessage
Renders action execution messages.

```tsx
const CustomActionMessage = ({ message, ...props }) => {
  return (
    <div className="custom-action-message">
      <div>Executing: {message.name}</div>
      {message.status === "executing" && <Spinner />}
    </div>
  );
};
```

### RenderResultMessage
Renders action result messages.

```tsx
const CustomResultMessage = ({ message, ...props }) => {
  return (
    <div className="custom-result-message">
      <div>Result: {message.result}</div>
    </div>
  );
};
```

## Input Components

### Custom Input Component
```tsx
const CustomInput = ({ 
  onSubmit, 
  onStopGeneration, 
  isLoading, 
  placeholder,
  ...props 
}) => {
  return (
    <div className="custom-input">
      <textarea
        placeholder={placeholder}
        disabled={isLoading}
        onKeyDown={(e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            onSubmit(e.target.value);
          }
        }}
      />
      <button onClick={onSubmit} disabled={isLoading}>
        Send
      </button>
    </div>
  );
};
```

## Markdown Rendering

### Custom Markdown Components
```tsx
const markdownTagRenderers = {
  code: ({ children, className, ...props }) => {
    const language = className?.replace('language-', '');
    return (
      <pre className={`code-block ${className}`}>
        <code className={className}>
          <SyntaxHighlighter language={language}>
            {children}
          </SyntaxHighlighter>
        </code>
      </pre>
    );
  },
  
  pre: ({ children, ...props }) => (
    <div className="custom-pre-block">
      {children}
    </div>
  ),
  
  // Custom components for other markdown elements
  h1: ({ children }) => <h1 className="custom-h1">{children}</h1>,
  p: ({ children }) => <p className="custom-p">{children}</p>,
};
```

## Styling and Theming

### CSS Custom Properties
```css
:root {
  --copilotkit-chat-bg: #ffffff;
  --copilotkit-chat-border: #e5e7eb;
  --copilotkit-message-bg: #f9fafb;
  --copilotkit-message-user-bg: #3b82f6;
  --copilotkit-message-user-text: #ffffff;
  --copilotkit-input-bg: #ffffff;
  --copilotkit-input-border: #d1d5db;
  --copilotkit-button-bg: #3b82f6;
  --copilotkit-button-text: #ffffff;
  --copilotkit-button-hover: #2563eb;
}
```

### Tailwind CSS Classes
```tsx
<CopilotChat
  className="
    bg-white border border-gray-200 rounded-lg shadow-lg
    max-w-2xl mx-auto
    [&_.copilotkit-message]:bg-gray-50
    [&_.copilotkit-message-user]:bg-blue-500
    [&_.copilotkit-input]:border-gray-300
    [&_.copilotkit-button]:bg-blue-600 hover:bg-blue-700
  "
/>
```

## Event Handling

### Chat Events
```tsx
<CopilotChat
  onInProgress={(inProgress) => {
    // Handle loading state changes
    setIsLoading(inProgress);
  }}
  
  onSubmitMessage={(message) => {
    // Handle new message submission
    analytics.track('message_sent', { message });
  }}
  
  onStopGeneration={(args) => {
    // Handle generation stop
    const { currentAgentName, stopGeneration } = args;
    stopGeneration();
  }}
  
  onReloadMessages={(args) => {
    // Handle message regeneration
    const { messageId, reloadMessages } = args;
    reloadMessages(messageId);
  }}
  
  onRegenerate={(messageId) => {
    // Handle specific message regeneration
    console.log('Regenerating message:', messageId);
  }}
  
  onCopy={(message) => {
    // Handle message copy
    navigator.clipboard.writeText(message);
    showToast('Message copied!');
  }}
  
  onThumbsUp={(message) => {
    // Handle positive feedback
    analytics.track('feedback_positive', { messageId: message.id });
  }}
  
  onThumbsDown={(message) => {
    // Handle negative feedback
    analytics.track('feedback_negative', { messageId: message.id });
  }}
/>
```

## Advanced Customization

### Custom System Message Function
```tsx
const makeSystemMessage = (contextString: string, instructions: string) => {
  return `You are a helpful AI assistant for our application.
  
Context: ${contextString}

Instructions: ${instructions}

Please be concise and helpful in your responses.`;
};

<CopilotChat makeSystemMessage={makeSystemMessage} />
```

### Custom Suggestions
```tsx
const CustomSuggestions = ({ suggestions, onSuggestionClick }) => {
  return (
    <div className="custom-suggestions">
      {suggestions.map((suggestion, index) => (
        <button
          key={index}
          onClick={() => onSuggestionClick(suggestion)}
          className="suggestion-button"
        >
          {suggestion}
        </button>
      ))}
    </div>
  );
};
```

## Best Practices

1. **Import Styles**: Always import the CSS file for proper styling
2. **Custom Components**: Use custom components for brand consistency
3. **Event Handling**: Implement proper event handlers for analytics and UX
4. **Responsive Design**: Test components on different screen sizes
5. **Accessibility**: Ensure custom components meet accessibility standards
6. **Performance**: Use React.memo for custom components when appropriate
7. **Error Boundaries**: Wrap components in error boundaries for production

## Integration Examples

### Next.js App Router
```tsx
// app/layout.tsx
import "@copilotkit/react-ui/styles.css";

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <CopilotKit publicApiKey={process.env.NEXT_PUBLIC_COPILOT_PUBLIC_API_KEY}>
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}

// app/page.tsx
import { CopilotChat } from "@copilotkit/react-ui";

export default function Page() {
  return (
    <div className="container mx-auto p-4">
      <CopilotChat
        labels={{
          title: "My AI Assistant",
          initial: "Hello! How can I help you today?"
        }}
      />
    </div>
  );
}
```

### React with Custom Styling
```tsx
import { CopilotChat } from "@copilotkit/react-ui";
import "./custom-chat-styles.css";

function App() {
  return (
    <CopilotKit publicApiKey={process.env.REACT_APP_COPILOT_PUBLIC_API_KEY}>
      <div className="app">
        <CopilotChat
          className="my-custom-chat"
          labels={{
            title: "Custom Assistant",
            initial: "Welcome to our custom AI assistant!"
          }}
        />
      </div>
    </CopilotKit>
  );
}
```
