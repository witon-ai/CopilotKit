---
description: When editing or adding any core logic for CopilotKit
globs: 
alwaysApply: false
---
# CopilotKit Quick Reference

## Essential Imports
```tsx
import { CopilotKit } from "@copilotkit/react-core";
import { useCopilotChat, useCopilotAction, useCopilotReadable } from "@copilotkit/react-core";
import { CopilotPopup, CopilotTextarea } from "@copilotkit/react-ui";
```

## Setup Pattern
```tsx
// app/layout.tsx or main App component
<CopilotKit publicApiKey={process.env.NEXT_PUBLIC_COPILOT_PUBLIC_API_KEY}>
  {children}
</CopilotKit>
```

## Core Hooks Quick Reference

### useCopilotChat
```tsx
const { 
  visibleMessages, 
  appendMessage, 
  setMessages, 
  deleteMessage,
  reloadMessages,
  stopGeneration,
  reset,
  isLoading 
} = useCopilotChat();
```

### useCopilotAction
```tsx
useCopilotAction({
  name: "actionName",
  description: "What this action does",
  parameters: [
    { name: "param1", type: "string", required: true },
    { name: "param2", type: "number", required: false }
  ],
  handler: async ({ param1, param2 }) => {
    // Action logic here
    return "Success";
  },
  render: ({ args, status }) => (
    <div>Action UI: {args.param1}</div>
  )
});
```

### useCopilotReadable
```tsx
useCopilotReadable({
  description: "Context description for AI",
  value: yourDataObject
});
```

## UI Components

### CopilotPopup
```tsx
<CopilotPopup 
  instructions="You are a helpful assistant"
  labels={{ title: "AI Assistant", initial: "Need help?" }}
/>
```

### CopilotTextarea
```tsx
<CopilotTextarea 
  placeholder="Type your message..."
  instructions="Help the user write better content"
/>
```

## Agent Patterns (CoAgents)

### Basic Agent
```tsx
const { agentState } = useCoAgent({ 
  name: "my_agent", 
  initialState: { data: "initial" } 
});
```

### Agent State Rendering
```tsx
useCoAgentStateRender({
  name: "my_agent",
  render: ({ state }) => <MyComponent {...state} />
});
```

## Common Action Patterns

### Form Filling
```tsx
useCopilotAction({
  name: "fillForm",
  parameters: [
    { name: "field", type: "string" },
    { name: "value", type: "string" }
  ],
  handler: async ({ field, value }) => {
    form.setValue(field, value);
  }
});
```

### Data Fetching
```tsx
useCopilotAction({
  name: "fetchData",
  parameters: [
    { name: "query", type: "string" }
  ],
  handler: async ({ query }) => {
    const data = await fetch(`/api/data?q=${query}`);
    return data.json();
  }
});
```

### File Operations
```tsx
useCopilotAction({
  name: "saveFile",
  parameters: [
    { name: "content", type: "string" },
    { name: "filename", type: "string" }
  ],
  handler: async ({ content, filename }) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
  }
});
```

## Context Patterns

### User Data
```tsx
useCopilotReadable({
  description: "Current user information",
  value: {
    name: user.name,
    email: user.email,
    preferences: user.preferences
  }
});
```

### Application State
```tsx
useCopilotReadable({
  description: "Current application state",
  value: {
    currentPage: router.pathname,
    selectedItems: selectedItems,
    filters: activeFilters
  }
});
```

### Form State
```tsx
useCopilotReadable({
  description: "Current form values",
  value: form.getValues()
});
```

## Error Handling
```tsx
useCopilotAction({
  name: "riskyAction",
  handler: async ({ param }) => {
    try {
      const result = await riskyOperation(param);
      return { success: true, data: result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
});
```

## Streaming Responses
```tsx
const { appendMessage } = useCopilotChat();

// Append message with streaming
await appendMessage(
  new TextMessage({
    content: "User question",
    role: Role.User
  })
);
```

## Authentication Integration
```tsx
useCopilotAuthenticatedAction_c({
  name: "protectedAction",
  parameters: [{ name: "data", type: "string" }],
  handler: async ({ data }) => {
    // Only runs if user is authenticated
  }
});
```

## Custom Instructions
```tsx
const { setChatInstructions } = useCopilotChat();

setChatInstructions("You are a specialized assistant for data analysis. Always provide insights and recommendations.");
```

## Development Tips

1. **Type Safety**: Always define parameter types for actions
2. **Descriptions**: Provide clear descriptions for actions and context
3. **Error Boundaries**: Wrap CopilotKit components in error boundaries
4. **Performance**: Use dependencies array in hooks to prevent unnecessary re-renders
5. **Testing**: Test AI interactions with mock responses
6. **Security**: Validate all AI inputs before processing
